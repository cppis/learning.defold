local rendercam = require "rendercam.rendercam"
local gesture = require "in.gesture"
local debugdraw = require "debug-draw.debug-draw"

--local mouse_spos = vmath.vector3() -- screen pos
--local mouse_wpos = vmath.vector3() -- world pos

local zstep = 10
local panning = false

function init(self)
	print("acquire input focus...")
	msg.post(".", "acquire_input_focus")
	gesture.SETTINGS.double_tap_interval = 1
	self.points = {}
	
	self.orbitCamAngle = 0
	self.mouse_spos = vmath.vector3()
	--cam_ids = { go.get_id("camera1"), go.get_id("camera2") }
	--self.camIndex = 1
end

function update(self, dt)
	local prev = nil
	for k,curr in pairs(self.points) do
		if nil ~= prev then
			--debugdraw.line(vmath.vector3(prev.x, prev.y, 0), vmath.vector3(curr.x, curr.y, 1))
			debugdraw.line(prev.x, prev.y, curr.x, curr.y)
		end

		prev = curr
	end
end

function on_input(self, action_id, action)
	local g = gesture.on_input(self, action_id, action)
	if g then
		if g.swipe_left then
			print("swipe_left", g.swipe.from, g.swipe.to)
		elseif g.swipe_right then
			print("swipe_right", g.swipe.from, g.swipe.to)
		elseif g.swipe_up then
			print("swipe_up", g.swipe.from, g.swipe.to)
		elseif g.swipe_down then
			print("swipe_down", g.swipe.from, g.swipe.to)
		elseif g.tap then
			print("tab", g.tap.position)
			--msg.post("/player/camera.camera", "play_animation", {id=hash("jump")})
		elseif g.double_tap then
			print("double_tap", g.double_tap.position)
		elseif g.long_press then
			print("long_press", g.long_press.position, g.long_press.time)
		elseif g.two_finger.tap then
			print("Two finger tap!")
		elseif g.two_finger.pinch then
			print("two_finger.pinch", g.two_finger.pinch.ratio, g.two_finger.center)
		end
	end	

	if action_id == nil then
		self.mouse_spos.x = action.screen_x;  self.mouse_spos.y = action.screen_y

		if panning then
			if self.camIndex == 1 or self.camIndex == 2 then
				-- if using one of the 2D-oriented cameras, use cursor world delta
				local dv = rendercam.screen_to_world_2d(action.screen_dx, action.screen_dy, true)
				rendercam.pan(-dv.x, -dv.y)
			else
				-- if using one of the 3D-oriented cameras, just use screen delta
				rendercam.pan(-action.screen_dx, -action.screen_dy)
			end
		end
		
	elseif action_id == hash("touch") and action.pressed then
		-- rendercam position
		local pos = rendercam.screen_to_world_2d(action.screen_x, action.screen_y)
		-- default position
		--local pos = vmath.vector3(action.x, action.y, 0)
		--print("touch pos x:" .. action.x .. ", y:" .. action.y)
		local id = factory.create("/go#factory", pos)
		go.set_position(pos, id)
		table.insert(self.points, pos)
		--go.animate(id, "position.x", go.PLAYBACK_ONCE_FORWARD, 720, go.EASING_LINEAR, 3)

	elseif action_id == hash("mouse_wheel_up") then
		rendercam.zoom(-zstep)

	elseif action_id == hash("mouse_wheel_down") then
		rendercam.zoom(zstep)
		
	elseif action_id == hash("mouse_button_middle") then
		if action.pressed then
			panning = true
		elseif action.released then
			panning = false
		end
		
	end
end

function on_message(self, message_id, message)
	if message_id == hash("remove_point") then
		--print("remove point...")
		
		head = table.remove(self.points, 1)
	end
end
